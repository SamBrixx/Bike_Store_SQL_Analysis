-- A) FOUNDATIONAL CONCEPTS (SELECT,FROM,WHERE,ORDER BY,LIMIT)
-- 1. CUSTOMER INFORMATION
-- Full name and email of customers from NY state
SELECT first_name,last_name,email, state
FROM customers
WHERE state = 'NY'; 

-- List all customers that have a phone number
SELECT *
FROM customers
WHERE phone IS NOT NULL;

-- 2. PRODUCT DETAILS
-- All products from a specific brand
SELECT product_name, brand_name
FROM products
INNER JOIN brands
ON products.brand_id = brands.brand_id
WHERE brands.brand_name = 'Trek';

-- All products from a specific category. Use the USING command
SELECT product_name, category_name
FROM products
INNER JOIN categories
USING (category_id)
WHERE category_name = 'Mountain Bikes';

-- All products with a list price greater than $2,000 ordered from the most expensive to the least expensive
SELECT product_name,list_price
FROM products
WHERE list_price >'2000'
ORDER BY list_price DESC;

-- 3. STORE AND STAFF INFORMATION
-- List all stores and their information
SELECT *
FROM stores;

-- Find names and email addresses of all staff working at a specific location
SELECT city AS location,first_name,last_name,staffs.email AS email
FROM staffs
LEFT JOIN stores
USING (store_id)
WHERE stores.zip_code = '75088';

-- B. DATA AGGREGATION (COUNT,SUM,AVG,GROUP BY,HAVING)
-- 1. SALES ANALYSIS
-- Total Revenue generated by each store
SELECT s.store_name, SUM(oi.quantity * oi.list_price * (1 - oi.discount)) AS revenue
FROM orders AS o
INNER JOIN order_items AS oi
ON o.order_id = oi.order_id 
INNER JOIN stores AS s
ON o.store_id = s.store_id
GROUP BY s.store_name
ORDER BY revenue DESC;

-- Total Number of orders placed by each customer
SELECT customer_id, COUNT(order_id) AS total_orders
FROM orders
GROUP BY customer_id
ORDER BY total_orders DESC, customer_id;

-- Determine the average order value
SELECT AVG(order_revenue) AS average_order_value
FROM(
	SELECT o.order_id, SUM(oi.quantity * oi.list_price * (1- oi.discount)) AS order_revenue
	FROM orders AS o
	INNER JOIN order_items AS oi
	ON o.order_id = oi.order_id
	GROUP BY order_id
) AS order_totals;

-- Which product category generated the most revenue
SELECT c.category_name, ROUND(SUM(total_revenue.revenue),2) AS revenue_totals
FROM 
(SELECT p.category_id, p.product_name,oi.quantity * oi.list_price * (1-oi.discount) AS revenue
FROM order_items AS oi
INNER JOIN products AS p
ON oi.product_id = p.product_id) AS total_revenue
INNER JOIN categories AS c
USING (category_id)
GROUP BY c.category_name
ORDER BY c.category_name;

-- 2. INVENTORY MANAGEMENT
-- Total quantity of a specific product in stock across all stores
SELECT total_stock.product_name, st.store_name, SUM(total_stock.quantity) AS grand_total
FROM 
	(SELECT s.store_id, p.product_name, s.quantity
	FROM stocks AS s
	INNER JOIN products AS p
	ON s.product_id = p.product_id) AS total_stock
INNER JOIN stores AS st
USING (store_id)
GROUP BY total_stock.product_name, st.store_name;

-- Total value of each product in stock at each store
SELECT s.store_name, p.product_name, p.list_price, st.quantity, p.list_price * st.quantity AS total_value
FROM stocks AS st
INNER JOIN products AS P
USING (product_id)
INNER JOIN stores AS s
USING (store_id);

-- Total value of all products in stock at each store
SELECT s.store_name, SUM(p.list_price * COALESCE(st.quantity, 0)) AS total_value
FROM stocks AS st
INNER JOIN products AS p
USING (product_id)
INNER JOIN stores AS s
USING (store_id)
GROUP BY s.store_name;

-- Identify which products are low in stock i.e Total quantity is less than 10
SELECT s.store_name, p.product_name, st.quantity
FROM stocks AS st
INNER JOIN products AS p
USING (product_id)
INNER JOIN stores AS s
USING (store_id)
WHERE st.quantity <10
ORDER BY s.store_name;

-- 3. SALES PERFORMANCE
-- Count the number of orders each staff  memeber has handled
SELECT s.first_name, s.last_name, COUNT(o.order_id) AS no_of_orders
FROM orders AS o
INNER JOIN staffs AS s
USING (staff_id)
GROUP BY s.first_name,s.last_name
ORDER BY no_of_orders DESC;

-- Determine which staff member has generated the most sales
SELECT s.first_name, s.last_name, ROUND(SUM(total_sales.sales),2) AS total_sales
FROM
	(SELECT o.staff_id, oi.quantity, oi.quantity * oi.list_price * (1-oi.discount) AS sales
	FROM order_items AS oi
	INNER JOIN orders AS o
	USING (order_id)) AS total_sales
INNER JOIN staffs AS s
ON total_sales.staff_id = s.staff_id
GROUP BY s.first_name, s.last_name
ORDER BY total_sales DESC;

-- C. COMBINING DATA (JOIN)
-- 1. CUSTOMER & ORDER INSIGHTS
-- List the first and last name of each customer along with the date of ther order
SELECT c.first_name, c.last_name, o.order_date
FROM orders AS o
INNER JOIN customers AS c
USING (customer_id);

-- All customers who have placed an order in a specific year
SELECT c.first_name, c.last_name, EXTRACT(YEAR FROM o.order_date) AS year
FROM orders AS o
INNER JOIN customers AS c
USING (customer_id);

-- 2. PRODUCTS & SALES PERFORMANCE
-- Display the names of all products, their brands, and their categories
SELECT p.product_name AS product, b.brand_name AS brand, c.category_name AS category
FROM products AS p
INNER JOIN brands AS b
USING (brand_id)
INNER JOIN categories AS c
USING (category_id)
ORDER BY b.brand_name;

-- Show the product name, store name and quantity sold for every item in a specific order
SELECT p.product_name, s.store_name, oi.quantity, o.order_date 
FROM order_items AS oi
INNER JOIN products AS p
USING (product_id)
INNER JOIN orders AS o
USING (order_id)
INNER JOIN stores AS s
USING (store_id)
ORDER BY p.product_name;

-- Find the total revenue generated from each brand
SELECT b.brand_name, ROUND(SUM(oi.quantity * oi.list_price * (1-oi.discount)),2) AS revenue
FROM order_items AS oi
INNER JOIN products AS p
USING (product_id)
INNER JOIN brands AS b
USING (brand_id)
GROUP BY b.brand_name
ORDER BY revenue DESC;

-- 3. ADVANCED BUSINESS QUERIES
-- Determine which store had the highest total revenue in a given month. (We will choose 2017 and June which is month 6)
SELECT total_revenue.store_name, ROUND(SUM(total_revenue.revenue),2) AS revenue 
FROM
	(SELECT s.store_name, EXTRACT(MONTH FROM o.order_date) AS month, oi.quantity * oi.list_price * (1-oi.discount) AS revenue
	FROM order_items AS oi
	INNER JOIN orders AS o
	USING (order_id)
	INNER JOIN stores AS s
	USING (store_id)
    WHERE EXTRACT(MONTH FROM o.order_date) = 6
    AND EXTRACT(YEAR FROM o.order_date) = 2017
    ) AS total_revenue
GROUP BY total_revenue.store_name
ORDER BY revenue DESC;

-- Find the names of staff members who have sold a specific brand of bike
SELECT s.first_name, s.last_name, b.brand_name, p.product_name, o.order_date
FROM order_items AS oi
INNER JOIN orders AS o
USING (order_id)
INNER JOIN staffs AS s
USING (staff_id)
INNER JOIN products AS p
USING (product_id)
INNER JOIN brands AS b
USING (brand_id)
ORDER BY o.order_date;